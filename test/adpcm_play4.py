import RsOPNA
import time

rs = RsOPNA.RsOPNA()
rs.open()
rs.reset()

rs.seq_mem_limit(0xffff)

def mem_set(pat, adr, msg):
    rs.seq_mem_fill_pat(adr*4, adr*4+3, pat, 32 * 0x04, msg)


def test_seq_play(self, start, stop, deltan, volume, repeat, msg):
    self.msg(msg)
    rs.poll_stat(0.1)
    self.out(0x10, 0x00).out(0x10, 0x80)
    self.out(0x00, 0x20)
    rs.poll_stat(0.1)
    self.out(0x01, 0xc2)
    rs.poll_stat(0.1)
    self.out(0x02, start & 0xff).out(0x03, (start >> 8) & 0xff)
    self.out(0x04, stop & 0xff).out(0x05, (stop >> 8) & 0xff)
    self.out(0x09, deltan & 0xff).out(0x0a, (deltan >> 8) & 0xff)
    self.out(0x0b, volume)
    rs.poll_stat(0.1)
    rs.out(0x10, 0x80)
    rs.poll_stat(0.1)
    if repeat:
        self.out(0x00, 0xb0)
    else:
        self.out(0x00, 0xa0)
    rs.poll_stat(0.1)
    self.nl()

def test_seq_stop(self, msg):
    self.msg(msg)
    self.out(0x00, 0xa1).poll_stat(0.1)
    self.out(0x10, 0x80).poll_stat(0.1)
    self.out(0x00, 0x00).poll_stat(0.1).out(0x10, 0x80).poll_stat(0.1).nl()


def test(adr, rep, msg):
    test_seq_play(rs, adr*4, adr*4+3, int(512), 0xff, rep, "PLAY " + msg)
    rs.out(0x10, 0x80)
    rs.poll_stat(0.05)
    rs.out(0x10, 0x80)
    rs.poll_stat(0.2)
    rs.out(0x10, 0x80)
    rs.poll_stat(0.2)
    rs.out(0x10, 0x80)
    rs.poll_stat(0.2)
    rs.out(0x10, 0x80)
    rs.poll_stat(0.2)
    test_seq_stop(rs, "STOP")

silence = []
for i in range(128):
    silence.append(0x80)

pat_orig = [
    0x77, 0x77,
    0x77, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,

    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
    0x43, 0xcb,
]

t=0
pat = silence
mem_set(pat, t, "PAT {:d}".format(t))
t+=1
pat = pat_orig
mem_set(pat, t, "PAT {:d}".format(t))
t+=1

for i in range(0, t):
    test(i, False, "TEST {:d}".format(i))

for i in range(0, t):
    test(i, True, "TEST REPEAT {:d}".format(i))

